// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gonpe/video/v1/video.proto

package videov1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A video content classification.
type Category int32

const (
	Category_CATEGORY_UNKNOWN     Category = 0
	Category_CATEGORY_ANIMATION   Category = 1
	Category_CATEGORY_MUSIC       Category = 2
	Category_CATEGORY_VARIETY     Category = 3
	Category_CATEGORY_DRAMA       Category = 4
	Category_CATEGORY_CINEMA      Category = 5
	Category_CATEGORY_SPORT       Category = 6
	Category_CATEGORY_INFORMATION Category = 7
	Category_CATEGORY_NEWS        Category = 8
	Category_CATEGORY_DOCUMENTARY Category = 9
	Category_CATEGORY_THEATER     Category = 10
	Category_CATEGORY_HOBBY       Category = 11
	Category_CATEGORY_WELFARE     Category = 12
	Category_CATEGORY_ETC         Category = 13
)

var Category_name = map[int32]string{
	0:  "CATEGORY_UNKNOWN",
	1:  "CATEGORY_ANIMATION",
	2:  "CATEGORY_MUSIC",
	3:  "CATEGORY_VARIETY",
	4:  "CATEGORY_DRAMA",
	5:  "CATEGORY_CINEMA",
	6:  "CATEGORY_SPORT",
	7:  "CATEGORY_INFORMATION",
	8:  "CATEGORY_NEWS",
	9:  "CATEGORY_DOCUMENTARY",
	10: "CATEGORY_THEATER",
	11: "CATEGORY_HOBBY",
	12: "CATEGORY_WELFARE",
	13: "CATEGORY_ETC",
}

var Category_value = map[string]int32{
	"CATEGORY_UNKNOWN":     0,
	"CATEGORY_ANIMATION":   1,
	"CATEGORY_MUSIC":       2,
	"CATEGORY_VARIETY":     3,
	"CATEGORY_DRAMA":       4,
	"CATEGORY_CINEMA":      5,
	"CATEGORY_SPORT":       6,
	"CATEGORY_INFORMATION": 7,
	"CATEGORY_NEWS":        8,
	"CATEGORY_DOCUMENTARY": 9,
	"CATEGORY_THEATER":     10,
	"CATEGORY_HOBBY":       11,
	"CATEGORY_WELFARE":     12,
	"CATEGORY_ETC":         13,
}

func (x Category) String() string {
	return proto.EnumName(Category_name, int32(x))
}

func (Category) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_83e5cd47fcaaecba, []int{0}
}

// A video publishing status.
type Status int32

const (
	Status_STATUS_UNREGISTERED       Status = 0
	Status_STATUS_REGISTERED         Status = 1
	Status_STATUS_PUBLISHED          Status = 2
	Status_STATUS_ARCHIVED           Status = 3
	Status_STATUS_TEMPORARY_RESTORED Status = 4
)

var Status_name = map[int32]string{
	0: "STATUS_UNREGISTERED",
	1: "STATUS_REGISTERED",
	2: "STATUS_PUBLISHED",
	3: "STATUS_ARCHIVED",
	4: "STATUS_TEMPORARY_RESTORED",
}

var Status_value = map[string]int32{
	"STATUS_UNREGISTERED":       0,
	"STATUS_REGISTERED":         1,
	"STATUS_PUBLISHED":          2,
	"STATUS_ARCHIVED":           3,
	"STATUS_TEMPORARY_RESTORED": 4,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_83e5cd47fcaaecba, []int{1}
}

// A video information.
type Video struct {
	ShortId              string               `protobuf:"bytes,1,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	VideoUrl             string               `protobuf:"bytes,2,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	ThumbnailUrl         string               `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Title                string               `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description          string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Category             Category             `protobuf:"varint,6,opt,name=category,proto3,enum=gonpe.video.v1.Category" json:"category,omitempty"`
	Status               Status               `protobuf:"varint,7,opt,name=status,proto3,enum=gonpe.video.v1.Status" json:"status,omitempty"`
	Chapter              float64              `protobuf:"fixed64,8,opt,name=chapter,proto3" json:"chapter,omitempty"`
	Duration             *duration.Duration   `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	FileSizeBytes        int64                `protobuf:"varint,10,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	RecordedAt           *timestamp.Timestamp `protobuf:"bytes,11,opt,name=recorded_at,json=recordedAt,proto3" json:"recorded_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Video) Reset()         { *m = Video{} }
func (m *Video) String() string { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()    {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_83e5cd47fcaaecba, []int{0}
}

func (m *Video) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Video.Unmarshal(m, b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Video.Marshal(b, m, deterministic)
}
func (m *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(m, src)
}
func (m *Video) XXX_Size() int {
	return xxx_messageInfo_Video.Size(m)
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

func (m *Video) GetShortId() string {
	if m != nil {
		return m.ShortId
	}
	return ""
}

func (m *Video) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *Video) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *Video) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Video) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Video) GetCategory() Category {
	if m != nil {
		return m.Category
	}
	return Category_CATEGORY_UNKNOWN
}

func (m *Video) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNREGISTERED
}

func (m *Video) GetChapter() float64 {
	if m != nil {
		return m.Chapter
	}
	return 0
}

func (m *Video) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Video) GetFileSizeBytes() int64 {
	if m != nil {
		return m.FileSizeBytes
	}
	return 0
}

func (m *Video) GetRecordedAt() *timestamp.Timestamp {
	if m != nil {
		return m.RecordedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("gonpe.video.v1.Category", Category_name, Category_value)
	proto.RegisterEnum("gonpe.video.v1.Status", Status_name, Status_value)
	proto.RegisterType((*Video)(nil), "gonpe.video.v1.Video")
}

func init() { proto.RegisterFile("gonpe/video/v1/video.proto", fileDescriptor_83e5cd47fcaaecba) }

var fileDescriptor_83e5cd47fcaaecba = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xdd, 0x6e, 0xda, 0x30,
	0x14, 0xc7, 0x1b, 0x28, 0x5f, 0x87, 0x42, 0x5d, 0xb7, 0xeb, 0x52, 0xa6, 0x6d, 0x68, 0x93, 0x26,
	0xd4, 0x8b, 0x20, 0xba, 0xed, 0x6a, 0x57, 0x01, 0x5c, 0x88, 0x56, 0x12, 0xe4, 0x18, 0x3a, 0xa6,
	0x4a, 0x11, 0x1f, 0x2e, 0x8d, 0x04, 0x0d, 0x0a, 0x06, 0xa9, 0xbd, 0xdc, 0xa3, 0xec, 0x72, 0x4f,
	0xd0, 0x67, 0xd8, 0x53, 0x4d, 0x71, 0x42, 0xd4, 0x74, 0x77, 0xf8, 0xf7, 0xff, 0xd9, 0xc7, 0x1c,
	0x9f, 0x40, 0x65, 0xee, 0xdd, 0xaf, 0x78, 0x7d, 0xeb, 0xce, 0xb8, 0x57, 0xdf, 0x36, 0xc2, 0x1f,
	0xda, 0xca, 0xf7, 0x84, 0x87, 0xcb, 0x32, 0xd3, 0x42, 0xb4, 0x6d, 0x54, 0xde, 0xcd, 0x3d, 0x6f,
	0xbe, 0xe0, 0x75, 0x99, 0x4e, 0x36, 0xb7, 0xf5, 0xd9, 0xc6, 0x1f, 0x0b, 0xd7, 0xbb, 0x0f, 0xfd,
	0xca, 0xfb, 0x97, 0xb9, 0x70, 0x97, 0x7c, 0x2d, 0xc6, 0xcb, 0x55, 0x28, 0x7c, 0x78, 0x4a, 0x43,
	0x66, 0x18, 0x9c, 0x86, 0xcf, 0x20, 0xbf, 0xbe, 0xf3, 0x7c, 0xe1, 0xb8, 0x33, 0x55, 0xa9, 0x2a,
	0xb5, 0x02, 0xcd, 0xc9, 0xb5, 0x31, 0xc3, 0x6f, 0xa0, 0x20, 0x2b, 0x3a, 0x1b, 0x7f, 0xa1, 0xa6,
	0x64, 0x96, 0x97, 0x60, 0xe0, 0x2f, 0xf0, 0x47, 0x28, 0x89, 0xbb, 0xcd, 0x72, 0x72, 0x3f, 0x76,
	0x17, 0x52, 0x48, 0x4b, 0xe1, 0x20, 0x86, 0x81, 0x74, 0x02, 0x19, 0xe1, 0x8a, 0x05, 0x57, 0xf7,
	0x65, 0x18, 0x2e, 0x70, 0x15, 0x8a, 0x33, 0xbe, 0x9e, 0xfa, 0xee, 0x2a, 0xb8, 0xb2, 0x9a, 0x91,
	0xd9, 0x73, 0x84, 0xbf, 0x40, 0x7e, 0x3a, 0x16, 0x7c, 0xee, 0xf9, 0x0f, 0x6a, 0xb6, 0xaa, 0xd4,
	0xca, 0x17, 0xaa, 0x96, 0x6c, 0x81, 0xd6, 0x8a, 0x72, 0x1a, 0x9b, 0x58, 0x83, 0xec, 0x5a, 0x8c,
	0xc5, 0x66, 0xad, 0xe6, 0xe4, 0x9e, 0xd3, 0x97, 0x7b, 0x6c, 0x99, 0xd2, 0xc8, 0xc2, 0x2a, 0xe4,
	0xa6, 0x77, 0xe3, 0x95, 0xe0, 0xbe, 0x9a, 0xaf, 0x2a, 0x35, 0x85, 0xee, 0x96, 0xf8, 0x2b, 0xe4,
	0x77, 0x1d, 0x55, 0x0b, 0x55, 0xa5, 0x56, 0xbc, 0x38, 0xd3, 0xc2, 0x96, 0x6a, 0xbb, 0x96, 0x6a,
	0xed, 0x48, 0xa0, 0xb1, 0x8a, 0x3f, 0xc1, 0xe1, 0xad, 0xbb, 0xe0, 0xce, 0xda, 0x7d, 0xe4, 0xce,
	0xe4, 0x41, 0xf0, 0xb5, 0x0a, 0x55, 0xa5, 0x96, 0xa6, 0xa5, 0x00, 0xdb, 0xee, 0x23, 0x6f, 0x06,
	0x10, 0x7f, 0x83, 0xa2, 0xcf, 0xa7, 0x9e, 0x3f, 0xe3, 0x33, 0x67, 0x2c, 0xd4, 0xa2, 0xac, 0x50,
	0xf9, 0xaf, 0x02, 0xdb, 0x3d, 0x1a, 0x85, 0x9d, 0xae, 0x8b, 0xf3, 0xa7, 0x14, 0xe4, 0x77, 0x7f,
	0x1e, 0x9f, 0x00, 0x6a, 0xe9, 0x8c, 0x74, 0x2c, 0x3a, 0x72, 0x06, 0xe6, 0x77, 0xd3, 0xba, 0x36,
	0xd1, 0x1e, 0x3e, 0x05, 0x1c, 0x53, 0xdd, 0x34, 0x7a, 0x3a, 0x33, 0x2c, 0x13, 0x29, 0x18, 0x43,
	0x39, 0xe6, 0xbd, 0x81, 0x6d, 0xb4, 0x50, 0x2a, 0x71, 0xc2, 0x50, 0xa7, 0x06, 0x61, 0x23, 0x94,
	0x4e, 0x98, 0x6d, 0xaa, 0xf7, 0x74, 0xb4, 0x8f, 0x8f, 0xe1, 0x30, 0x66, 0x2d, 0xc3, 0x24, 0x3d,
	0x1d, 0x65, 0x12, 0xa2, 0xdd, 0xb7, 0x28, 0x43, 0x59, 0xac, 0xc2, 0x49, 0xcc, 0x0c, 0xf3, 0xd2,
	0xa2, 0xd1, 0x05, 0x72, 0xf8, 0x08, 0x4a, 0x71, 0x62, 0x92, 0x6b, 0x1b, 0xe5, 0x13, 0x72, 0xdb,
	0x6a, 0x0d, 0x7a, 0xc4, 0x64, 0x3a, 0x1d, 0xa1, 0x42, 0xe2, 0x66, 0xac, 0x4b, 0x74, 0x46, 0x28,
	0x82, 0x44, 0xc1, 0xae, 0xd5, 0x6c, 0x8e, 0x50, 0x31, 0x61, 0x5e, 0x93, 0xab, 0x4b, 0x9d, 0x12,
	0x74, 0x80, 0x11, 0x1c, 0xc4, 0x94, 0xb0, 0x16, 0x2a, 0x9d, 0xff, 0x52, 0x20, 0x1b, 0xce, 0x00,
	0x7e, 0x0d, 0xc7, 0x36, 0xd3, 0xd9, 0xc0, 0x76, 0x06, 0x26, 0x25, 0x1d, 0xc3, 0x66, 0x84, 0x92,
	0x36, 0xda, 0xc3, 0xaf, 0xe0, 0x28, 0x0a, 0x9e, 0x61, 0x25, 0x28, 0x11, 0xe1, 0xfe, 0xa0, 0x79,
	0x65, 0xd8, 0x5d, 0xd2, 0x46, 0xa9, 0xa0, 0x25, 0x11, 0xd5, 0x69, 0xab, 0x6b, 0x0c, 0x49, 0x1b,
	0xa5, 0xf1, 0x5b, 0x38, 0x8b, 0x20, 0x23, 0xbd, 0xbe, 0x45, 0x75, 0x3a, 0x72, 0x28, 0xb1, 0x99,
	0x15, 0x9c, 0xb4, 0xdf, 0xb4, 0x01, 0x4f, 0xbd, 0xe5, 0x8b, 0xd1, 0x6c, 0x82, 0xfc, 0x1a, 0xfb,
	0xc1, 0xd3, 0xf7, 0x95, 0x9f, 0x39, 0xc9, 0xb7, 0x8d, 0xdf, 0xa9, 0x74, 0x67, 0xf8, 0xe3, 0x4f,
	0xaa, 0xdc, 0x91, 0xb6, 0x74, 0xb4, 0x61, 0xe3, 0x6f, 0x04, 0x6e, 0x24, 0xb8, 0x19, 0x36, 0x26,
	0x59, 0x39, 0x34, 0x9f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xa3, 0x33, 0xd9, 0x45, 0x04,
	0x00, 0x00,
}
